@model IEnumerable<WageRateDetailResultSet>
@{
    ViewData["Title"] = "Grade:" + Model.FirstOrDefault().Ordinal;

    var latestYear = Model.Select(a => a.FinYear).OrderByDescending(a => a).FirstOrDefault();
    var current = Model.Where(a => a.FinYear == latestYear).FirstOrDefault();
    var previous = Model.Where(a => a.FinYear != latestYear).OrderByDescending(a => a.FinYear).FirstOrDefault();
    
    var applicableYears = Model.Select(a => new
    {
        FinYear = a.FinYear,
        CPIIndex = a.CPIIndex,
        WageRate = a.PropertyValue
    }).GroupBy(a => new { a.CPIIndex, a.WageRate, a.FinYear })
            .Select(a => new
            {
                FinYear = a.Key.FinYear,
                CPIIndex = a.Key.CPIIndex,
                WageRate = a.Key.WageRate
            }).OrderBy(a=>a.FinYear);

    var occupationGroups = Model.Where(a=>a.FinYear == latestYear).Select(a => new
    {
        Group = a.OccupationGroup,
        Id = a.OccupationGroupId,

    })
    .GroupBy(a => new { a.Group, a.Id })
    .Select(a => new
    {
        Id = a.Key.Id,
        Group = a.Key.Group,
        Count = a.Count()
    });


    var totalOccupations = occupationGroups.Sum(a => a.Count);
    var wageAmountDifference = current.Amount - previous.Amount;
    var wageRateDifference = current.PropertyValue - previous.PropertyValue;
    var cpiIndexDifference = current.CPIIndex - previous.CPIIndex;
    var iteration = 1;
    var activeClass = "active";
}
<div class="container">

    <!--Page header-->
    <div class="page-header">
        <div class="page-leftheader">
            <h4 class="page-title">Grade : @Model.FirstOrDefault().Ordinal Insights</h4>
        </div>
        <div class="page-rightheader ms-auto d-lg-flex d-none">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/Home" class="d-flex"><svg class="svg-icon" xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="M0 0h24v24H0V0z" fill="none"></path><path d="M12 3L2 12h3v8h6v-6h2v6h6v-8h3L12 3zm5 15h-2v-6H9v6H7v-7.81l5-4.5 5 4.5V18z"></path><path d="M7 10.19V18h2v-6h6v6h2v-7.81l-5-4.5z" opacity=".3"></path></svg><span class="breadcrumb-icon"> Home</span></a></li>
                <li class="breadcrumb-item active" aria-current="page">Wage Rate: Grade @Model.FirstOrDefault().Ordinal</li>
            </ol>
        </div>
    </div>
    <!--End Page header-->
    <!-- Row -->
    <div class="row">
         <div class="col-xl-12 col-lg-12 col-md-12">


                <!--Row-->
                <div class="row">
                    <div class="col-xl-4 col-md-12 col-lg-3">
                        <div class="card expenses-card overflow-hidden">
                            <div class="card-body">
                                <div class="feature">
                                    <i class="fa fa-tachometer feature-icon"></i>
                                    <h1 class="font-weight-bold mb-0 mt-4 fs-50">@current.Amount.ToRandValue()</h1>
                                    <p class="text-muted fs-18 mb-0">Latest Rate/Hour</p>
                                <p class="text-muted small mb-0">
                                    <strong>
                                        <i class="fa fa-calendar"></i>
                                    Year: @current.FinYear 
                                    </strong>
                                    </p>
                                </div>
                            </div>
                            <div class="chart-wrapper">
                                <div class="chartjs-size-monitor" style="position: absolute; inset: 0px; overflow: hidden; pointer-events: none; visibility: hidden; z-index: -1;"><div class="chartjs-size-monitor-expand" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;"><div style="position:absolute;width:1000000px;height:1000000px;left:0;top:0"></div></div><div class="chartjs-size-monitor-shrink" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;"><div style="position:absolute;width:200%;height:200%;left:0; top:0"></div></div></div>
                                <canvas id="Chart" class="overflow-hidden chartjs-render-monitor" width="376" height="120" style="display: block; width: 376px; height: 120px;"></canvas>
                            </div>
                        </div>
                    </div>
                    <div class="col-xl-8 col-md-12 col-lg-9">
                        <div class="card">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-12 col-sm d-flex mb-4 mb-sm-0">
                                        <i class="mdi mdi-calendar fs-60 text-success icon-dropshadow-success me-3"></i>
                                        <div class="mt-5">
                                            <h6>Years</h6>
                                        <h3 class="mb-0 font-weight-bold">@applicableYears.Count()</h3>
                                        </div>
                                    </div>
                                    <div class="col-12 col-sm d-flex mb-4 mb-sm-0">
                                        <i class="mdi mdi-account-multiple fs-60 text-primary icon-dropshadow-primary me-3"></i>
                                        <div class="mt-5">
                                            <h6>Occupation Groups</h6>
                                            <h3 class="mb-0 font-weight-bold">@occupationGroups.Count()</h3>
                                        </div>
                                    </div>
                                    <div class="col-12 col-sm d-flex">
                                        <i class="mdi mdi-account-multiple fs-60 text-danger icon-dropshadow-danger me-3"></i>
                                        <div class="mt-5">
                                            <h6>Occupations</h6>
                                            <h3 class="mb-0 font-weight-bold">@occupationGroups.Sum(a=>a.Count)</h3>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xl-4 col-lg-4 col-md-6">
                                <div class="card">
                                    <div class="card-body">
                                        <p class="mb-1">Amount Per/hr</p>
                                        <h2 class="mb-1 font-weight-bold">@current.Amount.ToRandValue()</h2>
                                        <span class="mb-1 text-muted">
                                     
                                            @if (wageAmountDifference < 0)
                                            {
                                                <span class="text-danger"><i class="fa fa-caret-down  me-1"></i> @(wageAmountDifference)</span>
                                            }
                                            else
                                            {
                                                <span class="text-success"><i class="fa fa-caret-up  me-1"></i> @(wageAmountDifference * -1)</span>
                                            }

                                            vs @previous.Amount.ToRandValue() last year
                                        
                                            </span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-4 col-lg-4 col-md-6">
                                <div class="card">
                                    <div class="card-body">
                                        <p class="mb-1">Wage Rate (%)</p>
                                    <h2 class="mb-1 font-weight-bold">@current.PropertyValue %</h2>
                                    @if (wageRateDifference < 0)
                                    {
                                        <span class="text-danger"><i class="fa fa-caret-down  me-1"></i> @(wageRateDifference)</span>
                                    }
                                    else
                                    {
                                        <span class="text-success"><i class="fa fa-caret-up  me-1"></i> @(wageRateDifference * -1)</span>
                                    }

                                    vs @previous.PropertyValue % last year
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-4 col-lg-4 col-md-12">
                                <div class="card">
                                    <div class="card-body">
                                        <p class="mb-1">CPI Index (%)</p>
                                    <h2 class="mb-1 font-weight-bold">@current.CPIIndex %</h2>
                                    <span class="mb-1 text-muted">

                                        @if (cpiIndexDifference < 0)
                                        {
                                            <span class="text-danger"><i class="fa fa-caret-down  me-1"></i> @(cpiIndexDifference)</span>
                                        }
                                        else
                                        {
                                            <span class="text-success"><i class="fa fa-caret-up  me-1"></i> @(cpiIndexDifference * -1)</span>
                                        }

                                        vs @previous.CPIIndex % last year

                                    </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row row-deck">
                   
                 <div class="col-xl-8 col-lg-7 col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Wage Rate vs CPI Index</h3>

                        </div>
                        <div class="card-body">
                            <div id="echart1" class="h-300"></div>
                            <div class="row mt-5">
                                <div class="col text-center">
                                    <span class="text-muted float-start"><div class="w-3 h-3 bg-secondary br-3 me-1 mt-1 float-start"></div> Wage Rate</span>
                                </div>
                                <div class="col text-center">
                                    <span class="text-muted float-end"><div class="w-3 h-3 bg-primary br-3 me-1 mt-1 float-start"></div> CPI Index</span>
                                </div>
                            </div>
                            <hr />
                            <div class="row">
                                <div class="col-sm-12">
                                    <div class="">
                                        <div class="table-responsive grid-wrapper invoice-table-responsive">
                                            <table class="table card-table table-vcenter text-nowrap mb-0 border">
                                                <thead>
                                                    <tr>
                                                        <th class="wd-lg-10p">Year</th>
                                                        <th class="wd-lg-20p text-right">Rate Increase(%)</th>
                                                        <th class="text-right">CPI Index (%)</th>
                                                    </tr>
                                                </thead>
                                                <tbody>

                                                    @foreach (var currentYear in applicableYears.OrderBy(a => a.FinYear))
                                                    {
                                                        <tr>
                                                            <td class="font-weight-semibold">
                                                                @currentYear.FinYear
                                                                <input type="hidden" class="RateByYear" name="RateByYear" data-finyear="@currentYear.FinYear" data-cpiindex="@currentYear.CPIIndex" data-wagerate="@currentYear.WageRate" />
                                                            </td>
                                                            <td class="text-right text-white bg-secondary">
                                                                @currentYear.WageRate %
                                                            </td>
                                                            <td class="text-right text-white bg-primary">
                                                                @currentYear.CPIIndex %
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>

                <div class="col-xl-4 col-md-12 col-lg-5">
                    @Html.Partial("_DataSource")
                </div>
                </div>
                <!--End row-->


            <div class="row  row-deck">

                <div class="col-xl-8 col-lg-12 col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Occcupation Groups</h3>
                          
                        </div>
                        <div class="card-body mx-auto text-center">
                            <div class="overflow-hidden">
                                <canvas class="canvasDoughnut" height="240" width="240" style="display: block;"></canvas>
                            </div>
                        </div>
                        <div class="card-body p-0">
                            <table class="table table-striped table-hover mb-0">
                                <thead><tr>
                                    <th>
                                        Groups
                                        </th>
                                        <th>Occupations</th>
                                        <th>Percent</th>
                                    </tr>
                                </thead>
                                <tbody>
                                      @foreach (var item in occupationGroups.OrderByDescending(a => a.Count))
                                    {

                                        var percent = Math.Round((item.Count * 1.0) / totalOccupations * 100.0, 2);
                                        string color = "bg-primary ";
                                        int ordinal = iteration % 5;
                                        switch (ordinal)
                                        {
                                            case 1:
                                                color = "bg-primary";
                                                break;
                                            case 2:
                                                color = "bg-secondary";
                                                break;
                                            case 3:
                                                color = "bg-success";
                                                break;
                                            case 4:
                                                color = "bg-info";
                                                break;
                                            case 5:
                                                color = "bg-warning";
                                                break;
                                            default:
                                                color = "bg-primary";
                                                break;
                                        }
                                    <tr class="border-bottom">
                                        <td class="p-3 d-flex">
                                                <input type="hidden" class="CountByOccupationGroup" name="CountByOccupationGroup" data-group="@item.Group" data-count="@item.Count"/>
                                            <div class="w-3 h-3 @color me-2 mt-1 brround"></div> @item.Group
                                        </td>
                                        <td class="p-3">

                                                <span class="badge @color rounded-pill">@item.Count</span>
                                            </td>
                                        <td class="p-3">
                                                <span class="badge @color rounded-pill">@percent%</span>
                                            </td>
                                    </tr>
                                        iteration += 1;
                                    }
                                    @{
                                        iteration = 1;
                                    }
                                   
                                </tbody>
                            </table>
                        </div>

                        <div class="card-body">
                            <div class="panel panel-primary">
                                <div class="tab-menu-heading">
                                    <div class="tabs-menu ">
                                        <!-- Tabs -->
                                        <ul class="nav panel-tabs">
                                            @foreach (var itemGroup in occupationGroups.OrderBy(a => a.Group))
                                            {
                                                <li class="">
                                                    <a href="#tab_distance_@itemGroup.Id" class="@activeClass" data-bs-toggle="tab">@itemGroup.Group</a>
                                                </li>

                                                activeClass = "";
                                            }
                                        </ul>
                                    </div>
                                </div>
                                <div class="panel-body tabs-menu-body">
                                    <div class="tab-content">
                                        @{
                                            activeClass = "active";

                                            foreach (var itemGroup in occupationGroups.OrderBy(a => a.Group))
                                            {
                                                var occupations = Model.Where(a => a.OccupationGroupId == itemGroup.Id && a.FinYear == latestYear);
                                                <div class="tab-pane @activeClass" id="tab_distance_@itemGroup.Id">
                                                    <div class="table-responsive table-bordered grid-wrapper scrollbar h-300 ps ps--active-y" id="scrollbar">
                                                        <table class="table card-table small mb-0">
                                                            <thead>
                                                                <tr>
                                                                    <th class="border-bottom-0">Occupation</th>
                                                                    <th class="border-bottom-0">Amount (per hour)</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                @foreach (var occupation in occupations.OrderBy(b => b.Occupation))
                                                                {
                                                                    <tr>
                                                                        <td>@occupation.Occupation</td>
                                                                        <td class="text-white bg-success">@occupation.Amount.ToRandValue()</td>
                                                                    </tr>
                                                                }
                                                            </tbody>
                                                        </table>
                                                        <div class="ps__rail-x" style="left: 0px; bottom: 0px;"><div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div></div><div class="ps__rail-y" style="top: 0px; height: 420px; right: 0px;"><div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 295px;"></div></div>
                                                        <div class="ps__rail-x" style="left: 0px; bottom: 0px;"><div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div></div><div class="ps__rail-y" style="top: 0px; height: 298px; right: 0px;"><div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 172px;"></div></div>
                                                    </div>
                                                </div>

                                                activeClass = "";
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

              
                </div>

                <div class="col-xl-4 col-lg-12 col-md-12">
                    @Html.Partial("_About")
                </div>
            </div>


        </div>
    </div>
</div>
@section scripts{

    <script type="text/javascript">

        $(document).ready(function () {


            var _scrollBars = $('.scrollbar');

            if (_scrollBars.length >0)
            {
                $.each(_scrollBars, function (index, object) {
                    var current = $(this);
                    const ps32 = new PerfectScrollbar(current[0], {
                        useBothWheelAxes: true,
                        suppressScrollX: true,
                    });
                });
            }


            $('#table-results').DataTable({
                "bSort": false,
                language: {
                    responsive: "true"
                }
            });

            ChartBuilder.CPIvsRate();
            ChartBuilder.CanvasChart();
        });

        var ChartBuilder = {
            CPIvsRate: function () {
                objCPIIndex = [];
                objWageRate = [];
                objFinYear = [];


                var dataContainer = $('.RateByYear');


                $.each(dataContainer, function (index, record) {
                    objCPIIndex.push($(this).data('cpiindex'));
                    objWageRate.push($(this).data('wagerate'));
                    objFinYear.push($(this).data('finyear'));
                });

                var chartdata3 = [
                    {
                        name: 'CPI Index',
                        type: 'bar',
                        smooth: true,
                        data: objCPIIndex,
                        //lineStyle: {
                        //    normal: {
                        //        opacity: 0.8,
                        //        width: 4,
                        //        curveness: 1
                        //    }
                        //}
                    },
                    {
                        name: 'Wage Rate',
                        type: 'bar',
                        smooth: true,
                        data: objWageRate,
                        //lineStyle: {
                        //    normal: {
                        //        opacity: 0.8,
                        //        width: 4,
                        //        curveness: 1
                        //    }
                        //}
                    }
                ];

                var option5 = {
                    grid: {
                        top: '6',
                        right: '0',
                        bottom: '17',
                        left: '35',
                    },
                    tooltip: {
                        show: true,
                        showContent: true,
                        alwaysShowContent: true,
                        triggerOn: 'mousemove',
                        trigger: 'axis',
                        axisPointer:
                        {
                            label: {
                                show: false,
                            }
                        }

                    },
                    xAxis: {
                        data: objFinYear,
                        axisLine: {
                            lineStyle: {
                                color: 'rgba(67, 87, 133, .09)'
                            }
                        },
                        axisLabel: {
                            fontSize: 10,
                            color: '#8e9cad'
                        }
                    },
                    yAxis: {
                        splitLine: {
                            lineStyle: {
                                color: 'rgba(67, 87, 133, .09)'
                            }
                        },
                        axisLine: {
                            lineStyle: {
                                color: 'rgba(67, 87, 133, .09)'
                            }
                        },
                        axisLabel: {
                            fontSize: 10,
                            color: '#8e9cad'
                        }
                    },
                    series: chartdata3,
                    color: ['#4454c3', '#f72d66']
                };
                var chart5 = document.getElementById('echart1');
                var barChart5 = echarts.init(chart5);
                barChart5.setOption(option5);
            },
            CanvasChart:function(){
                /*-----canvasDoughnut-----*/
                if ($('.canvasDoughnut').length) {

                objLabel = [];
                objCount = [];

                    var dataContainer = $('.CountByOccupationGroup');


                $.each(dataContainer, function (index, record) {
                        objLabel.push($(this).data('group'));
                        objCount.push($(this).data('count'));
                });

                    var chart_doughnut_settings = {
                        type: 'doughnut',
                        tooltipFillColor: "rgba(51, 51, 51, 0.55)",
                        data: {
                            labels:objLabel,
                            datasets: [{
                                data: objCount,
                                backgroundColor: ['#4454c3', '#f72d66', '#2dce89', '#45aaf2', '#ecb403', '#ff5b51'],
                                hoverBackgroundColor: ['#4454c3', '#f72d66', '#2dce89', '#45aaf2', '#ecb403', '#ff5b51']
                            }]
                        },
                        options: {
                            legend: false,
                            responsive: false
                        }
                    }

                    $('.canvasDoughnut').each(function () {

                        var chart_element = $(this);
                        var chart_doughnut = new Chart(chart_element, chart_doughnut_settings);

                    });
                }
                /*-----canvasDoughnut-----*/


            }

            
        }
    </script>


    }